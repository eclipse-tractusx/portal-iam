apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.keycloak.auth.existingSecret }}
  namespace: {{ .Release.Namespace }}
type: Opaque
# use lookup function to check if secret exists
{{- $secret := (lookup "v1" "Secret" .Release.Namespace .Values.keycloak.auth.existingSecret) }}
{{ if $secret -}}
data:
  # if secret exists, use value provided from values file (to cover update scenario) or existing value from secret
  # use data map instead of stringData to prevent base64 encoding of already base64-encoded existing value from secret
  # use index function for secret keys with hyphen otherwise '$secret.data.secretKey' works too
  admin-password: {{ ( .Values.secrets.auth.existingSecret.adminpassword | b64enc ) | default ( index $secret.data "admin-password" ) }}
  management-password: {{ ( .Values.secrets.auth.existingSecret.managementpassword | b64enc ) | default ( index $secret.data "management-password" ) }}
{{ else -}}
stringData:
  # if secret doesn't exist, use provided value from values file or generate a random one
  admin-password: {{ .Values.secrets.auth.existingSecret.adminpassword | default ( randAlphaNum 32 | quote ) }}
  management-password: {{ .Values.secrets.auth.existingSecret.managementpassword | default ( randAlphaNum 32 | quote ) }}
{{ end }}
